#define DATA_INPUT_PIN 36
#define SF 12                // spread factor
#define BW 500000.0          // bandwidth
#define FS 622117.0           // sample
#define DOWN_SAMPLE_SIZE 5.0  // Reduced sampling factor
#define pkt_size 16.25      // packet length
#define payload_chirp_num 4 // The number of chirps in the payload
#define high_level_rate 0.02

int lastMaxIndex(const float* r, int len);
float* corr(const float* raw_signal, int raw_len, const int* pattern, int pattern_len, float* output_corr);
void initModels();

int chirp_samples;
int* std_upchirp;
int* std_sfd;
float* raw_data;

void setup() {
  pinMode(DATA_INPUT_PIN, INPUT);
  Serial.begin(115200);
  initModels();
}

int lastMaxIndex(const float* r, int len) {
    int max_index = 0;
    float max_val = 0;
    for (int i = 0; i < len; i++) {
        if (r[i] > max_val) {
            max_val = r[i];
            max_index = i;
        }
    }
    for(int i = max_index; i < len; i++) {
        if(r[i] == max_val) max_index = i;
        else break;
    }
    return max_index;
}

float* corr(const float* raw_signal, int raw_len, const int* pattern, int pattern_len, float* output_corr) {
    int k = 0;
    int i = 0;
    int wLength = raw_len + pattern_len - 1;
    for (k = 0; k < wLength; k++) {
        output_corr[k] = 0;
        for (i = (0 > k + 1 - raw_len ? 0 : k + 1 - raw_len); i <= (k < pattern_len - 1 ? k : pattern_len - 1); i++) {
            output_corr[k] += raw_signal[k-i] * float(pattern[pattern_len - i - 1]);
        }
    }
    return output_corr;
}

void initModels() {
    chirp_samples = pow(2, SF) * FS / BW;
    chirp_samples /= DOWN_SAMPLE_SIZE;
    int len = chirp_samples * pkt_size;
    raw_data = new float[len];
    
    std_upchirp = new int[chirp_samples];
    int sfd_samples = chirp_samples * 2;
    std_sfd = new int[sfd_samples];
    int bin_size = chirp_samples * high_level_rate;

    for (int i = 0; i < chirp_samples - bin_size; i++) {
        std_upchirp[i] = 0;
    }
    for (int i = chirp_samples - bin_size; i < chirp_samples; i++) {
        std_upchirp[i] = 1;
    }

    for (int i = 0; i < chirp_samples - bin_size; i++) {
        std_sfd[i] = 0;
    }
    for (int i = chirp_samples - bin_size; i < chirp_samples; i++) {
        std_sfd[i] = 1;
    }
    for (int i = chirp_samples; i < chirp_samples * 2 - bin_size; i++) {
        std_sfd[i] = 1;
    }
    for (int i = chirp_samples * 2 - bin_size; i < chirp_samples * 2; i++) {
        std_sfd[i] = 0;
    }
}

void decode_lora_payload() {
    int len = chirp_samples * pkt_size;
    for(int i = 0; i < len; i++) {
        for(int j = 0; j < DOWN_SAMPLE_SIZE; j++) {
            raw_data[i] = digitalRead(DATA_INPUT_PIN);
        }
    }
    
    int new_len = len + chirp_samples * 2 - 1;
    float* corr_res = new float[new_len];
    corr_res = corr(raw_data, len, std_sfd, chirp_samples * 2, corr_res);
    int idx = lastMaxIndex(corr_res, new_len);
    int payload_start = idx + chirp_samples * 1.25;
    
    for(int i = 0; i < new_len; i++) {
        corr_res[i] = 0;
    }

    float* payload_data = new float[chirp_samples];

    for(int i = 0; i < payload_chirp_num; i++) {
        if(payload_start + chirp_samples * (i + 1) >= len) {
           break;
        }
        for(int j = 0;j < chirp_samples; j++) {
            payload_data[j] = raw_data[payload_start + chirp_samples * i + j];
        }
        corr_res = corr(payload_data, chirp_samples, std_upchirp, chirp_samples, corr_res);
        idx = lastMaxIndex(corr_res, chirp_samples);
    }
    delete payload_data;
    delete corr_res;
}

void loop() {
    if(digitalRead(DATA_INPUT_PIN) == 1) {
       decode_lora_payload();
    }
}